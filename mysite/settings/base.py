"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

# Source of some of this code: https://docs.wagtail.org/en/stable/getting_started/tutorial.html

# I also used code from this source: https://docs.wagtail.org/en/stable/tutorial/create-footer_for_all_pages.html

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

# Aqu√≠ se guarda la clave de Django en el archivo .env, es decir, en las
# variables de entorno (fuente: https://codinggear.blog/django-environment-variables/)
from dotenv import load_dotenv


# import wagtail_ai.prompts

PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/


# Application definition

INSTALLED_APPS = [
    "blog",     # <- Our new blog app.
    "base",     # <- Our new base app.
    "dashboard_app",     # <- Our new dashboard_app for employees app.
    "wagtail.contrib.settings",     # <- Add this to add models across all the web pages in the project
    "portfolio",     # <- Our new portfolio app.
    # "wagtail_ai",    # <- Wagtail AI's app so that I can use ChatGPT.
    "home",
    "search",
    "wagtail.contrib.forms",
    "wagtail.contrib.redirects",
    "wagtail.embeds",
    "wagtail.sites",
    "wagtail.users",
    "wagtail.snippets",
    "wagtail.documents",
    "wagtail.images",
    "wagtail.search",
    "wagtail.admin",
    "wagtail",
    "modelcluster",
    "taggit",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",
]

ROOT_URLCONF = "mysite.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(PROJECT_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",

                # Add this to register the _settings_ context processor:
                "wagtail.contrib.settings.context_processors.settings",
            ],
        },
    },
]

WSGI_APPLICATION = "mysite.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {

    # # This is the default database that Django uses. It's the SQLite one.
    # "default": {
    #     "ENGINE": "django.db.backends.sqlite3",
    #     "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    # }
    
    # Base de datos de PostgreSQL.
    # PONER LAS CREDENCIALES DE TU BASE DE DATOS en el .env.
    # TENGO QUE PONER LAS CREDENCIALES MANUALMENTE si quiero hacer migraciones.
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_NAME'),
        'USER': os.environ.get('POSTGRES_USER'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
        'HOST': os.environ.get('POSTGRES_HOST'),
        'PORT': os.environ.get('POSTGRES_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

STATICFILES_DIRS = [
    os.path.join(PROJECT_DIR, "static"),
]

STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = "/static/"

""" Ideally, these are the 3 settings that I need to put here to make the static files work with the S3 Bucket that 
I'm using from Backblaze. 

I'LL ACTIVATE THEM LATER.
"""
# STATIC_URL = '/static/'
# STATICFILES_DIRS = [os.path.join(PROJECT_DIR, 'static')]
# STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

# Default storage settings, with the staticfiles storage updated.
# See https://docs.djangoproject.com/en/5.0/ref/settings/#std-setting-STORAGES
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    # ManifestStaticFilesStorage is recommended in production, to prevent
    # outdated JavaScript / CSS assets being served from cache
    # (e.g. after a Wagtail upgrade).
    # See https://docs.djangoproject.com/en/5.0/ref/contrib/staticfiles/#manifeststaticfilesstorage
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.ManifestStaticFilesStorage",
    },
}


# Wagtail settings

WAGTAIL_SITE_NAME = "mysite"

# Search
# https://docs.wagtail.org/en/stable/topics/search/backends.html
WAGTAILSEARCH_BACKENDS = {
    "default": {
        "BACKEND": "wagtail.search.backends.database",
    }
}

# Base URL to use when referring to full URLs within the Wagtail admin backend -
# e.g. in notification emails. Don't include '/admin' or a trailing slash
WAGTAILADMIN_BASE_URL = "http://example.com"

# """ This installs the Wagtail AI pip module so that I can use ChatGPT to generate me entries on my blog while
# editing entries on the "Wordpress" stile text editor of each blog entry. The ChatGPT module also lets me fix any
# grammar mistakes.
# """
# WAGTAIL_AI = {
#     "BACKENDS": {
#         "default": {
#             "CLASS": "wagtail_ai.ai.llm.LLMBackend",
#             "CONFIG": {
#                 # Model ID recognizable by the "LLM" library.
#                 # This is for using OpenAI's ChatGPT Default free model.
#                 "MODEL_ID": "gpt-3.5-turbo",

#                 # This is for inserting my ChatGPT's API Key
#                 "INIT_KWARGS": {"key": os.environ.get('OPENAI_API_KEY')},
#             },
#         }
#     }
# }

""" Custom prompts for the ChatGPT model. 

When you click on the magic wand icon while you're editing or adding a text entry in Wagtail's text editor, 
I will add 2 new prompts: one for suggesting a story based on the highlighted text, and another for creating 
a poem in the style of Romanticism.
"""
# # DEBUG: DELETE LATER
# print("This will print the Default Prompts stored in wagtail_ai.prompts.DEFAULT_PROMPTS: ")
# print(wagtail_ai.prompts.DEFAULT_PROMPTS)

# # Define your custom prompts
# custom_prompts = [
#     {
#         "label": "My Custom Prompt",
#         "description": "This is a description of what my custom prompt does.",
#         "prompt": "This is the actual text that will be sent to the AI model.",
#         "method": "suggest",  # Use a valid method
#     },
# ]
#
# # Add your custom prompts to the module's DEFAULT_PROMPTS list
# wagtail_ai.prompts.DEFAULT_PROMPTS.extend(custom_prompts)

# # Convert DEFAULT_PROMPTS to a list
# WAGTAIL_AI_PROMPTS = list(wagtail_ai.prompts.DEFAULT_PROMPTS)
#
# # Append your custom prompts
# WAGTAIL_AI_PROMPTS.append(
#     {
#         "label": "My Custom Prompt",
#         "description": "This is a description of what my custom prompt does.",
#         "prompt": "This is the actual text that will be sent to the AI model.",
#         "method": "suggest",  # Use a valid method
#     }
# )

# WAGTAIL_AI_PROMPTS = {
#     "label": "Suggest a story",
#     "description": "Create a story based on the highlighted text.",
#     "prompt": "Create a story based on the highlighted text.",
#     "method": "suggest",  # Use a valid method
# },



# WAGTAIL_AI_PROMPTS = wagtail_ai.prompts.DEFAULT_PROMPTS + [
#     {
#         "label": "My Custom Prompt",
#         "description": "This is a description of what my custom prompt does.",
#         "prompt": "This is the actual text that will be sent to the AI model.",
#         "method": "suggest",  # Use a valid method
#     },
# ]



# WAGTAIL_AI_PROMPTS = wagtail_ai.prompts.DEFAULT_PROMPTS + [
#     {
#         "label": "Suggest a story",
#         "description": "Create a story based on the highlighted text.",
#         "prompt": "Create a story based on the highlighted text.",
#         "method": "suggest",  # Use a valid method
#     },
# ]
